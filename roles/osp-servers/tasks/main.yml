---

# tasks file for osp.servers
- name: Create new server instances and attaches them a network and passes metadata to the instance
  os_server:
    cloud: ospcloud
    name: "{{ item.name }}"
    image: "{{ item.image }}"
    meta: "group={{ item.group }},deployment_name={{ item.deployment_name }}"
    flavor: "{{ item.flavor }}"
    security_groups: "{{ item.security_group }}"
    loop: 
      - { name: "{{osp_servers.frontend.name}}", image: "{{osp_servers.frontend.image}}", group: "{{osp_servers.frontend.group}}", deployment_name: "{{osp_servers.frontend.deployment_name}}", flavor: "{{osp_servers.frontend.flavor}}", security_group: "{{osp_servers.frontend.security_group}}" }
      - { name: "{{osp_servers.app1.name}}", image: "{{osp_servers.app1.image}}", group: "{{osp_servers.app1.group}}", deployment_name: "{{osp_servers.app1.deployment_name}}", flavor: "{{osp_servers.app1.flavor}}", security_group: "{{osp_servers.app1.security_group}}" }
      - { name: "{{osp_servers.app2.name}}", image: "{{osp_servers.app2.image}}", group: "{{osp_servers.app2.group}}", deployment_name: "{{osp_servers.app2.deployment_name}}", flavor: "{{osp_servers.app2.flavor}}", security_group: "{{osp_servers.app2.security_group}}" }
      - { name: "{{osp_servers.db.name}}", image: "{{osp_servers.db.image}}", group: "{{osp_servers.db.group}}", deployment_name: "{{osp_servers.db.deployment_name}}", flavor: "{{osp_servers.db.flavor}}", security_group: "{{osp_servers.db.security_group}}" }
    key_name: ansible_ssh
    wait: yes
    nics:
    - net-name: int_network
    userdata: |
        #!/bin/bash
        curl -o /tmp/openstack.pub http://www.opentlc.com/download/ansible_bootcamp/openstack_keys/openstack.pub
        cat /tmp/openstack.pub >> /home/cloud-user/.ssh/authorized_keys
        curl -o /tmp/internal.repo http://www.opentlc.com/download/ansible_bootcamp/repo/internal.repo
        cp /tmp/internal.repo /etc/yum.repos.d/internal.repo
  register: instanceip

- name: Add floating IP to Server
  os_floating_ip:
    cloud: ospcloud
    state: "{{ item.state }}"
    reuse: yes
    server: "{{ item.name }}"
    network: ext_network
    wait: true
    timeout: 180
    loop: 
      - { state: "{{osp_servers.frontend.state}}", name: "{{osp_servers.frontend.name}}" } 
      - { state: "{{osp_servers.app1.state}}", name: "{{osp_servers.app1.name}}" }
      - { state: "{{osp_servers.app2.state}}", name: "{{osp_servers.app2.name}}" } 
      - { state: "{{osp_servers.db.state}}", name: "{{osp_servers.db.name}}" } 
    register: instancefloatingip

- name: Wait for server to be available
  wait_for:
    host: "{{ instancefloatingip.floating_ip.floating_ip_address }}"
    port: 22
    search_regex: OpenSSH
    timeout: 600
  delegate_to: "{{ inventory_hostname }}"
